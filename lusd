#!/usr/bin/env python

#  Little URL Shortening Daemon (lusd)
#  Copyright (C) 2013 Christian Lins <christian@lins.me>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import couchdb
import os
import time

from configobj import ConfigObj
from twisted.web import server, resource
from twisted.internet import reactor

# Short url alphabet, note the missing l and I for better readability
ALPHABET = '0123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ'


def getConfig():
    cfgFile = file('config.cfg')
    return ConfigObj(cfgFile)


def shortMe(hexhash):
    out = ''
    num = int(hexhash, 16)

    while num > 0:
        rem = num % len(ALPHABET)
        num = num / len(ALPHABET)
        out = ALPHABET[rem] + out

    return out


class LUSDResource(resource.Resource):
    """
    Resource handling all HTTP requests to the short url daemon.
    GET requests are redirected to the appropriate long url.
    POST requests return a short url to a given long one.
    """
    
    isLeaf = True

    def createShortURL(self, longURL):
        couch = couchdb.Server(config['couchdb_server'])
        db    = couch[config['couchdb_database']]
        return 

    def getLocation(self, _id):
        if _id == None or _id == '' or _id[0:1] != config['short_prefix']:
            return None

        _id = _id[1:]
        print("Resource " + _id)

        try:            
            couch = couchdb.Server(config['couchdb_server'])
            db    = couch[config['couchdb_database']]
        except couchdb.http.ResourceNotFound:
            print("Wake up! Database setup not valid!")
            os._exit(1)

        try:
            doc = db[_id]
            
            # Update stats
            doc['hits']        = doc['hits'] + 1
            doc['last_access'] = time.asctime(time.localtime(time.time()))
            db[_id] = doc
            
            return doc['location']
        except couchdb.http.ResourceNotFound:
            print("Resource " + _id + " not found")
            return None
    
    def render_GET(self, request):
        location = self.getLocation(request.path[1:])
        
        if location == None:
            if config['error404_redirect'] == 'None':
                request.setResponseCode(404)
                return "404 not found"
            else:
                location = config['error404_redirect'] + request.path[1:]
        
        request.setResponseCode(301)
        request.setHeader("location", location)
        return "301 moved permanently to " + location
        
    def render_POST(self, request):
        if request.path == "/create":
            self.createShortURL()
        return

print(shortMe('a3cca2b2aa1e3b5b3b5aad99a8529074'))
config = getConfig()
reactor.listenTCP(int(config['listen_port']), server.Site(LUSDResource()))
reactor.run()
